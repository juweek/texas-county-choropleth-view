name: Update Weather Data

on:
  schedule:
    - cron: '0 */1 * * *'  # Run every hour
  workflow_dispatch:

permissions:
  contents: write
  pages: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      CI: 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0  # Needed for pull/rebase to work
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas pytz

      - name: Set up Git identity
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Run weather data collection script
        run: |
          python src/texas-alerts.py --county-file src/texas-counties.csv --include-alerts --output-dir ./public
      
      - name: Verify output files
        run: |
          echo "Checking public directory contents:"
          ls -la ./public
          
          echo "Checking timestamp file:"
          if [ -f "./public/weather_timestamp.json" ]; then
            echo "Timestamp file exists"
            cat ./public/weather_timestamp.json
          else
            echo "ERROR: Timestamp file does not exist!"
          fi

      - name: Commit and push to main branch
        run: |
          git add public/texas_counties_weather.json public/texas_counties_weather.csv public/weather_timestamp.json dist/texas_counties_weather.json dist/texas_counties_weather.csv dist/weather_timestamp.json
          if ! git diff --quiet && ! git diff --staged --quiet; then
            git commit -m "Update weather data [automated]"
            
            # Try to push with up to 3 retries
            max_retries=3
            retry_count=0
            push_successful=false
            
            while [ $retry_count -lt $max_retries ] && [ "$push_successful" = false ]; do
              # Pull with rebase before pushing
              git pull --rebase origin main
              
              if git push origin main; then
                push_successful=true
                echo "Successfully pushed changes to main"
              else
                retry_count=$((retry_count+1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "Push failed, retrying in 10 seconds (attempt $retry_count of $max_retries)..."
                  sleep 10
                else
                  echo "Failed to push after $max_retries attempts"
                  exit 1
                fi
              fi
            done
          else
            echo "No changes detected in main branch, skipping commit"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: npm ci

      - name: Build and Deploy to GitHub Pages
        run: |
          # Configure git for GitHub Pages deployment
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git config --global url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          
          # Build the project
          npm run build
          
          # Copy weather data files to dist
          cp public/texas_counties_weather.json dist/
          cp public/texas_counties_weather.csv dist/
          cp public/weather_timestamp.json dist/
          
          # Deploy to GitHub Pages
          npm run deploy
          
          # Verify the deployment
          echo "Verifying dist directory contents:"
          ls -la dist/
          echo "Verifying weather data files:"
          cat dist/weather_timestamp.json
          
          # Verify gh-pages branch
          echo "Verifying gh-pages branch contents:"
          git fetch origin gh-pages
          git stash save "Temporary stash of weather data files"
          git checkout gh-pages
          echo "Contents of gh-pages branch:"
          ls -la
          git checkout main
          git stash pop || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_CHATBOT_API_URL: ${{ secrets.VITE_CHATBOT_API_URL }}

